"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
from django.core.cache import cache
from django.core.management.base import BaseCommand
from django.db import connection
from main.models import Cart, CartItem, Category, Product


class Command(BaseCommand):
    help = '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear-cache',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à',
        )
        parser.add_argument(
            '--analyze-tables',
            action='store_true',
            help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
        )
        parser.add_argument(
            '--vacuum',
            action='store_true',
            help='–í—ã–ø–æ–ª–Ω–∏—Ç—å VACUUM –¥–ª—è SQLite',
        )

    def handle(self, *args, **options):
        self.stdout.write('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...')

        if options['clear_cache']:
            self.clear_cache()

        if options['analyze_tables']:
            self.analyze_tables()

        if options['vacuum']:
            self.vacuum_database()

        self.stdout.write('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞"""
        self.stdout.write('üßπ –û—á–∏—â–∞–µ–º –∫—ç—à...')
        cache.clear()
        self.stdout.write('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω')

    def analyze_tables(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        self.stdout.write('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã...')
        
        with connection.cursor() as cursor:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT name, sql FROM sqlite_master 
                WHERE type='table' AND name NOT LIKE 'sqlite_%'
            """)
            
            tables = cursor.fetchall()
            
            for table_name, table_sql in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                
                self.stdout.write(f'üìã –¢–∞–±–ª–∏—Ü–∞ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π')
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
                cursor.execute(f"PRAGMA index_list({table_name})")
                indexes = cursor.fetchall()
                
                if indexes:
                    self.stdout.write(f'   üîç –ò–Ω–¥–µ–∫—Å—ã: {len(indexes)}')
                else:
                    self.stdout.write(f'   ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')

    def vacuum_database(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ VACUUM –¥–ª—è SQLite"""
        self.stdout.write('üßπ –í—ã–ø–æ–ª–Ω—è–µ–º VACUUM...')
        
        with connection.cursor() as cursor:
            cursor.execute("VACUUM")
        
        self.stdout.write('‚úÖ VACUUM –≤—ã–ø–æ–ª–Ω–µ–Ω')

    def get_database_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        stats = {
            'products': Product.objects.count(),
            'categories': Category.objects.count(),
            'carts': Cart.objects.count(),
            'cart_items': CartItem.objects.count(),
        }
        
        self.stdout.write('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
        for key, value in stats.items():
            self.stdout.write(f'   {key}: {value}')
        
        return stats
