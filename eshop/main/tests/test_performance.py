"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""
import time

from django.contrib.auth.models import User
from django.core.cache import cache
from django.db import connection, reset_queries
from django.test import Client, TestCase
from django.urls import reverse
from main.models import Cart, CartItem, Category, Product


class PerformanceTestCase(TestCase):
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = User.objects.create_user(
            username='testuser',
            password='testpass123'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.category1 = Category.objects.create(
            name='–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
            slug='electronics'
        )
        self.category2 = Category.objects.create(
            name='–û–¥–µ–∂–¥–∞',
            slug='clothing'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        for i in range(50):
            category = self.category1 if i % 2 == 0 else self.category2
            Product.objects.create(
                name=f'–¢–æ–≤–∞—Ä {i}',
                slug=f'product-{i}',
                description=f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {i}',
                price=100.00 + i,
                available=True,
                category=category
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        self.cart = Cart.objects.create(user=self.user)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        for i in range(5):
            product = Product.objects.get(id=i+1)
            CartItem.objects.create(
                cart=self.cart,
                product=product,
                quantity=i+1
            )
        
        self.client = Client()
        self.client.force_login(self.user)

    def test_index_page_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        start_time = time.time()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        cache.clear()
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
        response1 = self.client.get(reverse('main:index'))
        first_request_time = time.time() - start_time
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å –∫—ç—à–µ–º)
        start_time = time.time()
        response2 = self.client.get(reverse('main:index'))
        second_request_time = time.time() - start_time
        
        self.assertEqual(response1.status_code, 200)
        self.assertEqual(response2.status_code, 200)
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ
        self.assertLess(second_request_time, first_request_time)
        
        print(f"‚è±Ô∏è  –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {first_request_time:.3f}s")
        print(f"‚è±Ô∏è  –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {second_request_time:.3f}s")
        print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {first_request_time/second_request_time:.1f}x")

    def test_product_list_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        reset_queries()
        
        response = self.client.get(reverse('main:product_list'))
        
        self.assertEqual(response.status_code, 200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
        query_count = len(connection.queries)
        print(f"üîç SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {query_count}")
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 3-4 –∑–∞–ø—Ä–æ—Å–æ–≤
        self.assertLessEqual(query_count, 4)

    def test_search_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
        start_time = time.time()
        
        response = self.client.get(
            reverse('main:search_api'),
            {'q': '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'}
        )
        
        search_time = time.time() - start_time
        
        self.assertEqual(response.status_code, 200)
        self.assertLess(search_time, 0.1)  # –ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 100ms
        
        print(f"üîç –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time:.3f}s")

    def test_cart_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
        reset_queries()
        
        response = self.client.get(reverse('main:cart'))
        
        self.assertEqual(response.status_code, 200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
        query_count = len(connection.queries)
        print(f"üõí SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã: {query_count}")
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 2-3 –∑–∞–ø—Ä–æ—Å–æ–≤
        self.assertLessEqual(query_count, 3)

    def test_cache_efficiency(self):
        """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        cache.clear()
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –±–µ–∑ –∫—ç—à–∞
        start_time = time.time()
        response1 = self.client.get(reverse('main:index'))
        first_time = time.time() - start_time
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - —Å –∫—ç—à–µ–º
        start_time = time.time()
        response2 = self.client.get(reverse('main:index'))
        second_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç
        self.assertLess(second_time, first_time)
        
        # –ö—ç—à –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 2x —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        speedup = first_time / second_time
        self.assertGreaterEqual(speedup, 2.0)
        
        print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –∫—ç—à–∞: {speedup:.1f}x")

    def test_database_indexes(self):
        """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤"""
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ slug (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å)
        start_time = time.time()
        category = Category.objects.get(slug='electronics')
        slug_search_time = time.time() - start_time
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ name (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å)
        start_time = time.time()
        category = Category.objects.get(name='–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')
        name_search_time = time.time() - start_time
        
        # –û–±–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏
        self.assertLess(slug_search_time, 0.01)
        self.assertLess(name_search_time, 0.01)
        
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ slug: {slug_search_time:.4f}s")
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ name: {name_search_time:.4f}s")

    def test_pagination_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for page in [1, 2, 3]:
            start_time = time.time()
            response = self.client.get(
                reverse('main:product_list'),
                {'page': page}
            )
            page_time = time.time() - start_time
            
            self.assertEqual(response.status_code, 200)
            self.assertLess(page_time, 0.1)  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
            
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {page_time:.3f}s")

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        cache.clear()
        super().tearDown()


class CacheTestCase(TestCase):
    """–¢–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.category = Category.objects.create(
            name='–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            slug='test-category'
        )

    def test_category_caching(self):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        cache.clear()
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –±–µ–∑ –∫—ç—à–∞
        start_time = time.time()
        categories1 = Category.get_all_cached()
        first_time = time.time() - start_time
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - —Å –∫—ç—à–µ–º
        start_time = time.time()
        categories2 = Category.get_all_cached()
        second_time = time.time() - start_time
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
        self.assertEqual(len(categories1), len(categories2))
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ
        self.assertLess(second_time, first_time)
        
        print(f"‚è±Ô∏è  –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {first_time:.4f}s")
        print(f"‚è±Ô∏è  –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {second_time:.4f}s")

    def test_product_caching(self):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        for i in range(10):
            Product.objects.create(
                name=f'–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä {i}',
                slug=f'test-product-{i}',
                price=100.00,
                available=True,
                category=self.category
            )
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        cache.clear()
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –±–µ–∑ –∫—ç—à–∞
        start_time = time.time()
        products1 = Product.get_featured_products(5)
        first_time = time.time() - start_time
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - —Å –∫—ç—à–µ–º
        start_time = time.time()
        products2 = Product.get_featured_products(5)
        second_time = time.time() - start_time
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
        self.assertEqual(len(products1), len(products2))
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ
        self.assertLess(second_time, first_time)
        
        print(f"‚è±Ô∏è  –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {first_time:.4f}s")
        print(f"‚è±Ô∏è  –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {second_time:.4f}s")
